
#include <Wire.h>
#include <LiquidCrystal_PCF8574.h>

LiquidCrystal_PCF8574 lcd(0x27);

//Mario Theme
#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978

#define melodyPin 3
//Mario main theme melody
int melody[] = {
  NOTE_E7, NOTE_E7, 0, NOTE_E7,
  0, NOTE_C7, NOTE_E7, 0,
  NOTE_G7, 0, 0,  0,
  NOTE_G6, 0, 0, 0,

  NOTE_C7, 0, 0, NOTE_G6,
  0, 0, NOTE_E6, 0,
  0, NOTE_A6, 0, NOTE_B6,
  0, NOTE_AS6, NOTE_A6, 0,

  NOTE_G6, NOTE_E7, NOTE_G7,
  NOTE_A7, 0, NOTE_F7, NOTE_G7,
  0, NOTE_E7, 0, NOTE_C7,
  NOTE_D7, NOTE_B6, 0, 0,

  NOTE_C7, 0, 0, NOTE_G6,
  0, 0, NOTE_E6, 0,
  0, NOTE_A6, 0, NOTE_B6,
  0, NOTE_AS6, NOTE_A6, 0,

  NOTE_G6, NOTE_E7, NOTE_G7,
  NOTE_A7, 0, NOTE_F7, NOTE_G7,
  0, NOTE_E7, 0, NOTE_C7,
  NOTE_D7, NOTE_B6, 0, 0
};
//Mario main them tempo
int tempo[] = {
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,

  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,

  9, 9, 9,
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,

  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,

  9, 9, 9,
  12, 12, 12, 12,
  12, 12, 12, 12,
};

const int buzzer = 3;
int ans,x,y,z;
void setup() {
  
pinMode(4,INPUT_PULLUP);
pinMode(5,OUTPUT);
pinMode(8,INPUT_PULLUP); 
pinMode(9,INPUT_PULLUP);
pinMode(10,INPUT_PULLUP); 
pinMode(buzzer, OUTPUT);//buzzer
  pinMode(13, OUTPUT);//led indicator when singing a note

Serial.begin(9600);
lcd.setBacklight(0);
lcd.begin(16,2);

randomSeed(analogRead(0));
digitalWrite(5,LOW);
 
while(digitalRead(4)==1){//not alarming
  //do nothing
  digitalWrite(5,LOW);
}

if(digitalRead(4)==0){
  digitalWrite(5,HIGH);
  lcd.setBacklight(255);
   clearLcd();
  ans = exam();
}
}

void loop() {
 int h=0;
  x = digitalRead(10);
  y = digitalRead(9);
  z = digitalRead(8 );

  Serial.println(digitalRead(4));
  if(x==0) {
    h=1;
    Serial.print(h);
    Serial.print("->");
     checker(h);
  }
  if(y==0) {
    h=2;
    Serial.print(h);
    Serial.print("->");
     checker(h);
  }
  if(z==0) {
    h=3;
    Serial.print(h);
    Serial.print("->");
     checker(h);
  }

 
delay(100);
}

void alarm(){
  tone(buzzer,500);
  delay(100);
   
}

int exam(){
 
  clearLcd();
  int a = random(1,21);//first
  int b = random(1,4);//operator
  int c = random(1,21);//last
  
  long d = random(1,4);//random choice
  switch(b){
    case 1: //a+c
    lcd.setCursor(0,0);
    lcd.print(a);
    lcd.setCursor(2,0);
    lcd.print("+");
    lcd.setCursor(3,0);
    lcd.print(c);
    lcd.setCursor(0,1);
   
    switch(d){
      case 1: lcd.print("A)");
      lcd.setCursor(2,1);
      lcd.print(a+c);
      lcd.setCursor(4,1);
      lcd.print("B)");
      lcd.print(a+c+1);
      lcd.setCursor(8,1);
      lcd.print("C)");
      lcd.print(a+c+2);
      return 1;
      break;

       case 2: lcd.print("A)");
      lcd.setCursor(2,1);
      lcd.print(a+c-1);
      lcd.setCursor(4,1);
      lcd.print("B)");
      lcd.print(a+c);
      lcd.setCursor(8,1);
      lcd.print("C)");
      lcd.print(a+c+1);
      return 2;
      break;

       case 3: lcd.print("A)");
      lcd.setCursor(2,1);
      lcd.print(a+c-2);
      lcd.setCursor(4,1);
      lcd.print("B)");
      lcd.print(a+c-1);
      lcd.setCursor(8,1);
      lcd.print("C)");
      lcd.print(a+c);
      return 3;
      break;
      default:
      break;
    }
    break;

    case 2: //a*c
    lcd.setCursor(0,0);
    lcd.print(a);
    lcd.setCursor(2,0);
    lcd.print("*");
    lcd.setCursor(3,0);
    lcd.print(c);
    lcd.setCursor(0,1);

    switch(d){
      case 1: 
      lcd.print("A)");
      lcd.setCursor(2,1);
      lcd.print(a*c);
      lcd.setCursor(5,1);
      lcd.print("B)");
      lcd.print(a*c+10);
      lcd.setCursor(10,1);
      lcd.print("C)");
      lcd.print(a*c+20);
      return 1;
      break;

       case 2: 
       lcd.print("A)");
      lcd.setCursor(2,1);
      lcd.print(a*c-10);
      lcd.setCursor(5,1);
      lcd.print("B)");
      lcd.print(a*c);
      lcd.setCursor(10,1);
      lcd.print("C)");
      lcd.print(a*c+10);
      return 2;
      break;

       case 3: 
       lcd.print("A)");
      lcd.setCursor(2,1);
      lcd.print(a*c-20);
      lcd.setCursor(5,1);
      lcd.print("B)");
      lcd.print(a*c-10);
      lcd.setCursor(10,1);
      lcd.print("C)");
      lcd.print(a*c);
      return 3;
      break;
      default:
      break;
    }
    break;

     case 3: //a-c
     lcd.setCursor(0,0);
    lcd.print(a);
    lcd.setCursor(2,0);
    lcd.print("-");
    lcd.setCursor(3,0);
    lcd.print(c);
    lcd.setCursor(0,1);

    switch(d){
      case 1: 
      lcd.print("A)");
      lcd.setCursor(2,1);
      lcd.print(a-c);
      lcd.setCursor(5,1);
      lcd.print("B)");
      lcd.print(a-c+1);
      lcd.setCursor(10,1);
      lcd.print("C)");
      lcd.print(a-c+2);
      return 1;
      break;

       case 2: lcd.print("A)");
      lcd.setCursor(2,1);
      lcd.print(a-c-1);
      lcd.setCursor(5,1);
      lcd.print("B)");
      lcd.print(a-c);
      lcd.setCursor(10,1);
      lcd.print("C)");
      lcd.print(a-c+1);
      return 2;
      break;

       case 3: lcd.print("A)");
      lcd.setCursor(2,1);
      lcd.print(a-c-2);
      lcd.setCursor(5,1);
      lcd.print("B)");
      lcd.print(a-c-1);
      lcd.setCursor(10,1);
      lcd.print("C)");
      lcd.print(a-c);
      return 3;
      break;
      default:
      break;
    }
    break;
  }


}


void checker(int h){
  
    if(h==ans)
      correct();
    else
      wrong();
}

void correct(){
  clearLcd();
  lcd.setCursor(0,0);
    lcd.print("Good morning :)   ");  
     tone(buzzer,500);
     delay(500);
     noTone(buzzer);
     delay(500);
     clearLcd();
     lcd.setBacklight(0);
     digitalWrite(5,LOW);// process done
     sing();
}
void wrong(){
  lcd.setCursor(0,0);
    lcd.print("Wrong! wait 5s");
    tone(buzzer,100);
    delay(500);
     noTone(buzzer);
     
     delay(1000);
     lcd.setCursor(0,0);
     lcd.print("Wrong! wait 4s");
     delay(1000);
     lcd.setCursor(0,0);
     lcd.print("Wrong! wait 3s");
     delay(1000);
     lcd.setCursor(0,0);
     lcd.print("Wrong! wait 2s");
     delay(1000);
     lcd.setCursor(0,0);
     lcd.print("Wrong! wait 1s");
     delay(1000);
     
     ans = exam();// show new question
     Serial.print(ans);
     Serial.println();
}

void clearLcd(){
  lcd.setCursor (0, 0);
for (int i = 0; i < 16; ++i)
{
  lcd.write(' ');
}
lcd.setCursor (0, 1);
for (int i = 0; i < 16; ++i)
{
  lcd.write(' ');
}
}

void sing() {
  // iterate over the notes of the melody:
  

    Serial.println(" 'Mario Theme'");
    int size = sizeof(melody) / sizeof(int);
    for (int thisNote = 0; thisNote < size; thisNote++) {

      // to calculate the note duration, take one second
      // divided by the note type.
      //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
      int noteDuration = 1000 / tempo[thisNote];

      buzz(melodyPin, melody[thisNote], noteDuration);

      // to distinguish the notes, set a minimum time between them.
      // the note's duration + 30% seems to work well:
      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);

      // stop the tone playing:
      buzz(melodyPin, 0, noteDuration);

    
  }
}

void buzz(int targetPin, long frequency, long length) {
  digitalWrite(13, HIGH);
  long delayValue = 1000000 / frequency / 2; // calculate the delay value between transitions
  //// 1 second's worth of microseconds, divided by the frequency, then split in half since
  //// there are two phases to each cycle
  long numCycles = frequency * length / 1000; // calculate the number of cycles for proper timing
  //// multiply frequency, which is really cycles per second, by the number of seconds to
  //// get the total number of cycles to produce
  for (long i = 0; i < numCycles; i++) { // for the calculated length of time...
    digitalWrite(targetPin, HIGH); // write the buzzer pin high to push out the diaphram
    delayMicroseconds(delayValue); // wait for the calculated delay value
    digitalWrite(targetPin, LOW); // write the buzzer pin low to pull back the diaphram
    delayMicroseconds(delayValue); // wait again or the calculated delay value
  }
  digitalWrite(13, LOW);

}
